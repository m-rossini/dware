/*
 * Copyright (c) 2004-2005 Auster Solutions do Brasil. All Rights Reserved.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * 
 * Created on Apr 8, 2005
 */
package br.com.auster.dware.filter;

import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import br.com.auster.dware.graph.ConnectException;
import br.com.auster.dware.graph.DefaultFilter;

/**
 * This class is used to read SAX events and accumulate them to a DOM tree.
 * 
 * <p>
 * When all SAX events have finished comming, the method
 * <code>process(Element root)</code> will be called, where <code>root</code>
 * is the root of the DOM tree.
 * 
 * @version $Id: SAX2DOMFilter.java 2 2005-04-20 21:22:27Z rbarone $
 */
public abstract class SAX2DOMFilter extends DefaultFilter {

  /**
   * This class is used to accumulate all the SAX events inside a DOM tree. When
   * the document is ended, it will process the DOM tree.
   */
  private final class SAX2DOM extends org.apache.xalan.xsltc.trax.SAX2DOM {

    private final SAX2DOMFilter filter;

    public SAX2DOM(SAX2DOMFilter filter) throws ParserConfigurationException {
      this.filter = filter;
    }

    public void endDocument() {
      super.endDocument();
      this.filter.process(((Document) this.getDOM()).getDocumentElement());
    }
  }

  public SAX2DOMFilter(String name) {
    super(name);
  }

  /**
   * Process the SAX events generated by the input filter.
   */
  public abstract void process(Element root);

  /**
   * Returns a ContentHandler that will create a DOM tree from the events
   * received.
   */
  public Object getInput(String filterName) throws ConnectException, UnsupportedOperationException {
    try {
      return new SAX2DOM(this);
    } catch (ParserConfigurationException e) {
      throw new ConnectException(e);
    }
  }
}
